[project]
authors = [
    { name = "Zebedee Nicholls", email = "zebedee.nicholls@climate-resource.com" },
    { name = "Jared Lewis", email = "jared.lewis@climate-resource.com" }
]
requires-python = ">=3.11, <3.12"
# pip dependencies
dependencies = [
    "primap2>=0.11.1",
    "openscm-units>=0.6.1",
    "pydoit-nb>=0.3.4",
    "carpet-concentrations>=0.5.1",
    "scmdata>=0.17.0",
]
name = "local"
version = "0.2.1a1"
description = "Local code to support running the notebooks"
readme = "README.md"

[project.license]
text = "BSD-3-Clause"

[tool.pixi.pypi-dependencies.local]
path = "."
editable = true

# conda dependencies
[tool.pixi.dependencies]
input4mips-validation-locked = "0.11.3"
doit = ">=0.36.0,<0.37"
jupyterlab = ">=1.0"
loguru-config = ">=0.1.0"
pooch = ">=1.0"
scipy = ">=1.0"
geopandas = ">=1.0"
nc-time-axis = ">=1.4.1,<1.5"
openpyxl = ">=3.1"

# pip optional dependencies
[project.optional-dependencies]
dev = [
    "pre-commit",
    "mypy",
    "pandas-stubs",
    "tomli",
    "towncrier",
    "types-beautifulsoup4",
    "types-tqdm",
    "jupyter-resource-usage",
]
tests = [
    "pytest",
    "pytest-regressions[dataframe]",
    "coverage",
    "pytest-cov",
]

[tool.pixi.environments.tests]
features = [
    "tests",
]
solve-group = "default"

[tool.pixi.environments.all-dev]
features = [
    "dev",
    "tests",
]
solve-group = "default"

[tool.pixi.project]
channels = [
    "conda-forge",
]
platforms = [
    "osx-64",
    "osx-arm64",
    "linux-64",
    "linux-aarch64",
]

[tool.jupytext]
formats = "ipynb,py:percent"

[tool.pytest.ini_options]
addopts = "--strict-markers"
markers = [
    "coverage_breaker: marks tests as a coverage breaker (normally because running the test installs things in other venvs which confuses pytest-cov as far as we can tell)",
    "nightly: marks tests as being part of the nightly CI",
]

[tool.ruff]
src = ["src"]
exclude = ["notebooks-archive/*"]
target-version = "py311"
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # pyflakes
    "I",  # isort
    "D",  # pydocstyle
    "PL",  # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy rules
    "RUF",  # ruff specifics
    "UP",  # pyupgrade
    "S",  # flake8-bandit
    # pandas support via pandas-vet. In some cases we will want to disable
    # this because it can lead to too many false positives.
    "PD",
]
unfixable = [
    "PD002",  # Disable autofix for inplace as this often introduces bugs
]
ignore = [
    "D200",  # One-line docstring should fit on one line with quotes
    "D400",  # First line should end with a period
    "PD003", # False positives when using xarray
    "PD010", # `.pivot_table` is preferred to `.pivot` or `.unstack`; provides same functionality
    "PD013", # False positives when using xarray
]
# Provide some leeway for long docstring, this is otherwise handled by black
line-length = 110

[tool.ruff.per-file-ignores]
"notebooks/*" = [
    "D100",  # Missing docstring in public module
    "E402",  # Module level import not at top of file
    "E501",  # Line too long (false failure on comments coming from markdown cells)
    "S101",  # Use of `assert` detected
    "PD011", # False positives when using scmdata
]
"stubs/*" = [
    "D100",  # Missing docstring in public module
    "D103",  # Missing docstring in public function
    "PLR0913",  # Too many arguments
]
"tests/*" = [
    "D103",  # Missing docstring in public function
    "S101",  # Use of assert detected
]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.mypy]
strict = true
# show error codes on failure with context
show_error_codes = true
show_error_context = true
# warn if code can't be reached
warn_unreachable = true
# importing following uses default settings
follow_imports = "normal"

[tool.towncrier]
package = "local"
package_dir = "src"
filename = "docs/changelog.md"
directory = "changelog/"
title_format = "## CMIP GHG Concentration Generation {version} ({project_date})"
underlines = [
    "",
    "",
    "",
]
issue_format = "[#{issue}](https://github.com/climate-resource/CMIP-GHG-Concentration-Generation/pulls/{issue})"
type = [
    { directory = "breaking", name = "‚ö†Ô∏è Breaking Changes", showcontent = true },
    { directory = "deprecation", name = "üóëÔ∏è Deprecations", showcontent = true },
    { directory = "feature", name = "üÜï Features", showcontent = true },
    { directory = "improvement", name = "üéâ Improvements", showcontent = true },
    { directory = "fix", name = "üêõ Bug Fixes", showcontent = true },
    { directory = "docs", name = "üìö Improved Documentation", showcontent = true },
    { directory = "trivial", name = "üîß Trivial/Internal Changes", showcontent = false },
]

[tool.liccheck]
authorized_licenses = [
    "bsd",
    "bsd license",
    "BSD 3-Clause",
    "CC0",
    "apache",
    "apache 2.0",
    "apache software",
    "apache software license",
    "Apache License, Version 2.0",
    "Historical Permission Notice and Disclaimer (HPND)",
    "isc license",
    "isc license (iscl)",
    "gnu lgpl",
    "lgpl with exceptions or zpl",
    "LGPLv2+",
    "GNU Lesser General Public License v2 (LGPLv2)",
    "GNU Lesser General Public License v2 or later (LGPLv2+)",
    "mit",
    "mit license",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "python software foundation",
    "python software foundation license",
    "zpl 2.1",
]
unauthorized_licenses = [
    "agpl",
    "gnu agpl",
    "gpl v3",
    "gplv3",
    "gpl v2",
    "gplv2",
    "gpl v1",
    "gplv1",
]

[tool.coverage.report]
fail_under = 80
skip_empty = true
show_missing = true
# Regexes for lines to exclude from consideration in addition to the defaults
exclude_also = [
    # Don't complain about missing type checking code:
    "if TYPE_CHECKING",
    "@overload",
]
